[1mdiff --git a/avl/avl_tree.py b/avl/avl_tree.py[m
[1mindex f8dcfec..571552d 100644[m
[1m--- a/avl/avl_tree.py[m
[1m+++ b/avl/avl_tree.py[m
[36m@@ -274,6 +274,20 @@[m [mdef tree_count(tree):[m
     return 1 + tree_count(tree.left) + tree_count(tree.right)[m
 [m
 [m
[32m+[m[32mdef tree_rank(tree, key):[m
[32m+[m[32m    if tree is None:[m
[32m+[m[32m        return 0[m
[32m+[m
[32m+[m[32m    if key < tree.key:[m
[32m+[m[32m        return tree_rank(tree.left, key)[m
[32m+[m
[32m+[m[32m    elif key > tree.key:[m
[32m+[m[32m        return 1 + tree_count(tree.left) + tree_rank(tree.right, key)[m
[32m+[m
[32m+[m[32m    else:[m
[32m+[m[32m        return tree_count(tree.left)[m
[32m+[m
[32m+[m
 def check_avl_invariants(tree):[m
     if tree is None:[m
         return True[m
[36m@@ -315,6 +329,9 @@[m [mclass AVLTreeMap:[m
         node = tree_get(self.tree, key)[m
         return node.val[m
 [m
[32m+[m[32m    def rank(self, key):[m
[32m+[m[32m        return tree_rank(self.tree, key)[m
[32m+[m
     def clear(self):[m
         self.tree = None[m
 [m
[36m@@ -367,71 +384,3 @@[m [mclass AVLTreeMap:[m
 [m
     def delete_key(self, key):[m
         self.tree = tree_remove(self.tree, key)[m
[31m-[m
[31m-[m
[31m-[m
[31m-if __name__ == '__main__':[m
[31m-    root = None[m
[31m-[m
[31m-    seq = list(range(30))[m
[31m-[m
[31m-    import random[m
[31m-    random.seed(42)[m
[31m-    random.shuffle(seq)[m
[31m-    tree = AVLTreeMap()[m
[31m-    for key in seq:[m
[31m-        tree.add(key, key)[m
[31m-        print(tree)[m
[31m-        print()[m
[31m-        if not tree.is_avl():[m
[31m-            raise ValueError("invariant check failed")[m
[31m-[m
[31m-    tree_copied = tree.copy()[m
[31m-    tree_copied_2 = tree.copy()[m
[31m-[m
[31m-    while tree:[m
[31m-        print(tree.delete_min())[m
[31m-        print(tree)[m
[31m-        if not tree.is_avl():[m
[31m-            raise ValueError("invariant check failed")[m
[31m-        print(end='\n' * 2)[m
[31m-[m
[31m-    while tree_copied_2:[m
[31m-        print(tree_copied_2.delete_min())[m
[31m-        print(tree_copied_2)[m
[31m-        if not tree_copied_2.is_avl():[m
[31m-            raise ValueError("invariant check failed")[m
[31m-        print(end='\n' * 2)[m
[31m-[m
[31m-    for k in seq:[m
[31m-        print(f"delete {k=}")[m
[31m-        tree_copied.delete_key(k)[m
[31m-        print(tree_copied)[m
[31m-        if not tree_copied.is_avl():[m
[31m-            raise ValueError("invariant check failed")[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-    # root = tree.tree[m
[31m-    # root = delete_min(root)[m
[31m-    # print(root)[m
[31m-    # print()[m
[31m-    # root = delete_min(root)[m
[31m-    # print(root)[m
[31m-    # print()[m
[31m-[m
[31m-    # key = tree.min()[m
[31m-    # while 1:[m
[31m-    #     print(key)[m
[31m-    #     key = tree.next_large(key)[m
[31m-    #     if key is None:[m
[31m-    #         break[m
[31m-    #[m
[31m-    # key = tree.max()[m
[31m-    # while 1:[m
[31m-    #     print(key)[m
[31m-    #     key = tree.prev(key)[m
[31m-    #     if key is None:[m
[31m-    #         break[m
[31m-    # print(len(tree))[m
[1mdiff --git a/avl/test_avl_tree.py b/avl/test_avl_tree.py[m
[1mindex 310ba48..1eeb950 100644[m
[1m--- a/avl/test_avl_tree.py[m
[1m+++ b/avl/test_avl_tree.py[m
[36m@@ -5,15 +5,20 @@[m [mfrom avl.avl_tree import *[m
 [m
 random.seed(0)[m
 [m
[32m+[m[32mN = 2000[m
[32m+[m
 [m
 class AVLTreeMapTests(TestCase):[m
     def setUp(self):[m
[31m-        self.keys = list(range(1000))[m
[32m+[m[32m        self.keys = list(range(N))[m
         random.shuffle(self.keys)[m
         self.tree = AVLTreeMap()[m
         for k in self.keys:[m
             self.tree.add(k, k)[m
[31m-        #print(self.tree)[m
[32m+[m
[32m+[m[32m        if N <= 30:[m
[32m+[m[32m            print(end='\n'*3)[m
[32m+[m[32m            print(self.tree)[m
 [m
     def tearDown(self):[m
         self.keys = None[m
[36m@@ -56,13 +61,20 @@[m [mclass AVLTreeMapTests(TestCase):[m
     def testDeleteKey(self):[m
         tree = self.tree.copy()[m
         for k in self.keys:[m
[31m-            self.assertNotEqual(tree.get(k), None)[m
[32m+[m[32m            self.assertEqual(tree.get(k), k)[m
             tree.delete_key(k)[m
             self.assertTrue(tree.is_avl())[m
             with self.assertRaises(KeyError):[m
                 tree.get(k)[m
 [m
 [m
[32m+[m[32m    def testTreeRank(self):[m
[32m+[m[32m        tree = self.tree.copy()[m
[32m+[m[32m        sorted_keys = sorted(self.keys)[m
[32m+[m[32m        for i, k in enumerate(sorted_keys):[m
[32m+[m[32m            self.assertEqual(tree.rank(k), i)[m
[32m+[m
[32m+[m
 [m
 [m
 [m
